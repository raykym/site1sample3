% layout 'mobidef2';
% title 'Walkworld Supervise';

<script type="text/javascript" src="https://maps.google.com/maps/api/js?key=AIzaSyBtLOrp4b2x0j71FcDb1Vn9topnZPTNtaM"></script>
<script type="text/javascript">

 gpslocal_pos = null;  //user gps object


 SinarioInterval = 1000;  // シナリオループの間隔

 map = null ;
 mapoptions = null;
 mapobj = null;
 makerobj = new google.maps.Marker();
 makerobjects = [];

 gpssetID = null;
 gpsInterval = 1000; // 10secで１回GPSをチェックする。


 // checkuserのstashでサーバから送られる _はNPC用
 username = "<%= $username %>"; 
 uid = "<%= $uid %>"; 
 iconurl = "<%= $icon_url %>";
        if ( iconurl == "" ) {
           var icon = "<%= $icon %>";
               iconurl = "/imgcomm?oid=" + icon + "&resize=1";  
           }

// main?
$(function(){
  });
    wsCall(dumCall);


function Mtoggle(){

    if (MakerToggle) {
        MakerToggle = false;
    } else {
        MakerToggle = true;
    }
}

  // リセット
function hangUp(){
         window.location.reload();
    }

function dumCall(){
       //dummy Callback...
       }


// map描写
      var lat = 0;
      var lng = 0;
      google.maps.event.addDomListener(window, 'load', function() {
                  map = document.getElementById("gmap");
              var options = {
                      zoom: 10,
                      center: new google.maps.LatLng(lat, lng),
                      mapTypeId: google.maps.MapTypeId.ROADMAP,
                      scaleControl: true
              };
              mapobj = new google.maps.Map(map, options);
            });


// loopスタート
function loopstart(){
        gpssetID = window.setInterval(keyInput,gpsInterval); // loop set
}

// エネミー初期化  無効化中
function enmset(){
    //    var enm_url = "https://instance-1.backbone.site:3000/ghostman?c=5&lat=" + lat + "&lng=" + lng ;
        // キックするだけ
    //    $.ajax({
    //      type : 'get',
    //      url : enm_url,
    //      });
    };


  // GPS get  aCallback is dummy callback for Promise
function gpsset(aCallback){
    if ( ws.readyState != 1) { wsCall(dumCall); } // 接続がなければ接続する。
    getPosition(aCallback);
 //   if (! gpssetID) { loopstart(); }  // idがなければ起動
    }


function getPosition(aCallback){
    console.log("getPosition START!!!");

    var geoOptions = {
        enableHighAccuracy: true,   //高精度要求
        timeout: 6000,          //タイムアウト(ミリ秒)
        maximumAge: 0       //キャッシュ有効期限(ミリ秒)
    }
    var watchID =  navigator.geolocation.watchPosition(successCallback, errorCallback,geoOptions);

    function successCallback(position) {

          // MAP表示センター指定
          lat = position.coords.latitude;
          lng = position.coords.longitude;

          gpslocal_pos = {"gpslocation": {"latitude": position.coords.latitude,
                                          "longitude": position.coords.longitude,
                                          "altitude": position.coords.altitude,
                                          "accuracy": position.coords.accuracy,
                                          "altitudeAccuracy": position.coords.altitudeAccuracy,
                                          "heading": position.coords.heading,
                                          "speed": position.coords.speed
                                        }};

         // console.log("GPS:" + JSON.stringify(gpslocal_pos) );

    var timerecord = Date.now();

   // USER_STAT
          user_stat = {   
                       geometry: {
                                  type : "Point",
                                  coordinates : [ position.coords.longitude, position.coords.latitude ]
                                  },
                       loc : { lat : position.coords.latitude ,
                               lng : position.coords.longitude
                             },
                       name : username,
                       userid : uid,
                       status : "dummy",
                       time : timerecord,
                       icon_url : iconurl,
                      };

          console.log("user_stat:" + JSON.stringify(user_stat) );
      //    console.log("Send user_stat#######");

          // successCallback事前接続のはず
          ws.send(JSON.stringify(user_stat));


     // 再描写用 GPSの座標をセンターに再描写
             var opt2 = { center: new google.maps.LatLng(lat, lng)};
             mapobj.setOptions(opt2);

     // 追跡の停止
         navigator.geolocation.clearWatch(watchID);

     // Marker Set
         console.log("Marker SET");

                  makerobj.setMap(null);

                  makerobj = new google.maps.Marker({
                               position: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                               map: mapobj,
                               title: "mySelf"
                          });
                   console.log("Marker:" + position.coords.latitude + "|" + position.coords.longitude);
          aCallback(); // for promise
    }  // successCallback

    function errorCallback(error) {
      var err_msg = "";
      switch(error.code)
        {
        case 1:
          err_msg = "位置情報の利用が許可されていません";
          break;
        case 2:
          err_msg = "デバイスの位置が判定できません";
          break;
        case 3:
          err_msg = "タイムアウトしました";
          break;
      }
      //  alert(err_msg);
      console.log("DEBUG: " + err_msg);
      return;
     }

}  //getPosition


// WebSocket
function wsCall(aCallback){
      ws = new WebSocket('wss://<%= $url_host %>/walkworldsupv');
      console.log("DEBUG: ws Connect!!");
      $('#output').text("接続中");
      aCallback();
  } 

    ws.onopen = function(){
        console.log('Connection opened');
    }

    ws.onclose = function(){
        console.log("Close: WebSocket Close");
        $('#output').text("再接続");
        wsCall(dumCall);
    }

    ws.onerror = function(){
       alert("please Reload, Reconnect websocket!");
    }

// オンメッセージ処理 --------------------------------------------
    ws.onmessage = function(msg){
        var evt = JSON.parse(msg.data);
        //    console.log("evt:" + JSON.stringify(evt.pointlist));

            if ( evt == ""){ return; }
            if ( evt.to == user_stat.userid ) { return; } // 攻撃対象にユーザがなった場合、イベントをスルーする。

         <!-- ChatScreen -->
            if ( evt.chat ) {
                  $("#output_chat").prepend("<li><button><img src='" + evt.icon_url + "' width='50' height='50'> [" + "<a href=\"javascript:void(0)\" onclick=\"centerMap(" + evt.loc.lat + "," + evt.loc.lng + ")\">" + evt.username + "</a>" + "] " + "[" + evt.hms + "] " + evt.chat + "</button></li>");
                 return;
              } // if evt.chat

            console.log("Chat: latlng:" + lng + ":" + lat); /////////////////////////////////////

        console.log("DEBUG: makerobjects: " + makerobjects.length);
        // makerobjectsの初期化
            while ( makerobjects.length > 0){
                var mkobj = makerobjects.shift();
                console.log("DEBUG: marker delete " + mkobj.title);
                mkobj.setMap(null);
                }

        var plist = evt.pointlist;
        var plist_nd;  // if文で括ったので外出し

  // 個体追跡用処理の分岐 通常はevt.pointlistの処理
        if ( evt.upointlist ) {
            // 便宜上plist_ndにリストを渡してしまう。
            plist_nd = evt.upointlist;

            } else if ( evt.pointlist ) {

        // 自分を除外する。
        var plist_nonself = plist.filter( function( element, index) {
                  return element.userid != uid; 
                          });

          // 60秒前の時刻を取得して
  //        var leaptime = Date.now();
  //            leaptime = leaptime - 60000;

          // 除外リストを作成
  //        var plist_lep = plist_nonself.filter(function (l, ip, self){
  //                console.log("DEBUG: plist_lep: " + l.name + ":"+ l.time + " " + leaptime);
  //                return l.time > leaptime;
  //            });
          // indexOfで除外リストと比較
  //            plist_nd = plist_nonself.filter(function ( element, index ){
  //                if ( element === plist_lep[plist_lep.indexOf(element)]) {
  //                                             console.log("DEBUG: drop " + element.name);
  //                                             return -1;
  //                    } else {
  //                             console.log("DEBUG: through: " + element.name);
  //                             return; }
  //                });

    // test pass plist_nd
     //   var plist_nd = JSON.parse(JSON.stringify(plist_nonself));
        var plist_nd = plist_nonself.filter( function(element,index){
                         return element;
                       });

          // 10秒対応の為に、timeでsortして、
  //            plist_nonself.sort(function(a,b){
  //                         return ( a.time > b.time ? 1 : -1 );
  //                         });
           // uidを抽出して
  //         var nlist = [];
  //             plist_nonself.filter(function(x,i){
  //                        nlist.push(x.userid);
  //                        });
  //             console.log("DEBUG: nlist:" + nlist);

           // uidの重複を排除 位置、indexを記録する
  //         var nlist_indexes = [];
  //                    nlist.filter(function(x,i,self){
  //                        if ( self.indexOf(x) == i ) { nlist_indexes.push(i); }
  //                        });
  //          console.log("DEBUG: nlist_indexes:" + nlist_indexes);

          // indexで抽出する
  //          var plist_nd = [];
  //              for (var ind in nlist_indexes){
  //                        plist_nd.push(plist_nonself[ind]);
  //                  } // for

         //  console.log("DEBUG: plist_nd: " + JSON.stringify(plist_nd) );

         } // else if evt.pointlist

        var pcount = plist_nd.length;

        for ( var i=0; i < pcount; i++){
           var point = plist_nd[i]; 
           console.log("DEBUG: point " + JSON.stringify(point));
           if ( point.name == username ) { 
                                  console.log("DEBUG: Pass this point");
                                  continue;
                   }

               console.log("DEBUG: setMaker: " + makerobjects.length);
               makerobjects.push( new google.maps.Marker({
                              position: new google.maps.LatLng(point.loc.lat, point.loc.lng),
                               map: mapobj,
                               title: point.name,
                               icon: point.icon_url
                          }));
        } //for i
               console.log("DEBUG: setMaker After " + makerobjects.length);

    $('#uname').keydown(function (e) {
      if (e.keyCode == 13 && $('#uname').val()) {

      var mess = {"username":$('#uname').val()};
      var messjson = JSON.stringify(mess);
      ws.send(messjson);
      console.log("DEBUG: " + messjson );
      $('#uname').val('');
      }
    });

    $('#trapevent').keydown(function (e) {
      if (e.keyCode == 13 && $('#trapevent').val()) {

      var mess = {"trapevent":$('#trapevent').val()};
      var messjson = JSON.stringify(mess);
      ws.send(messjson);
      console.log("DEBUG: " + messjson );
      $('#trapevent').val('');
      }
    });

   } // ws.onmessage -----------------------------------------------------------------

// key input
function keyInput(){

           console.log("DEBUG: keyInput call. push or Interval");
           if (ws.readyState == 1) {
                $('#output').text("接続中");
               } else {
                $('#output').text("切断中");
           }
       var fetchgps = new Promise(function(resolv){
               gpsset(resolv);
            });
           fetchgps.then(function(){
           });
}




</script>

<div id="hantei" data-role="page" style="background-color: #aac78d;">
    <div data-role="header">
        <a href="#panel" data-icon="bars" data-iconpos="notext" class="ui-btn-left">panel</a>
        <h1>散歩world</h1>
        <a href="#r_panel" data-icon="info" data-iconpos="notext" class="ui-btn-right">Attack</a>
    </div>
  <div data-role="panel" id="panel" data-display="overlay" style="background-color: #aac78d;">
    <button type="button" class="ui-btn " onclick="gpsset(dumCall);">GPS Enable</button>
%#    <button type="button" class="ui-btn " onclick="enmset();">Ghost Set</button>
    <button type="button" class="ui-btn " onclick="hangUp();" style="background-color: #ff1111; color: #ffff00">Restart</button>
%#    <button type="button" class="ui-btn " onclick="Mtoggle();">Maker Toggle</button>
  </div>
  <div data-role="panel" id="r_panel" data-display="overlay" data-position="right" style="background-color: #aac78d;">
    <p>討伐数：<a id="user_points"></a></p>
%#    <button type="button" class="ui-btn " onClick="hitEmure();">HIT Emurator Support</button>
   <!-- chatScreen -->
    <div style="overflow: scroll; width: 250px; height: 400px; border: 1px solid">
        <ul id="output_chat" data-role="listview" data-inset="true"></ul>
    </div>
  </div>
  <div id="gmap" class="mapbase" style="width : 100%; height : 360px;"></div>
  <div class="ui-grid-a">
    <div class="ui-block-a"><div class="ui-bar"  style="hight: 60px"><button type="button" class="ui-btn " onClick="keyInput();" style="background-color: #aac78d; font-size: x-small;"><img id="arrow" class="arrow" src="/img/cyrclearrow_mos.png" width="45" hight="45"/><BR>GPS</button></div></div>
    <div class="ui-block-b"><div class="ui-bar"  style="hight: 60px"><p><input type="text" id="uname" placeholder="uname..."></p>
        <p><input type="text" id="trapevent" placeholder="event name..."></p>
        <p>接続判定：<a id="output"></a></p></div></div>
  </div> <!-- ui-grid-a -->
  <div style="border: 1px solid; background-color: #bbd89e;"><text id="textarea"></text></div>
</div>

