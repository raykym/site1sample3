% layout 'mobidef2';
% title 'Walkworld';

<script type="text/javascript" src="https://maps.google.com/maps/api/js?key=AIzaSyBtLOrp4b2x0j71FcDb1Vn9topnZPTNtaM"></script>
<script type="text/javascript">

 gpslocal_pos = null;  //user gps object
 lat = 0;
 lng = 0;

 onCount = 0;     // shake count
 acc_shl = 10;    // shake renge wide
 dist_shl = 20; // 距離判定20m

 N0r = 0; // 方角

 SencerInterval = 1000;  // シナリオループの間隔

 map = null ;
 mapoptions = null;
 mapobj = null;
 makerobj = new google.maps.Marker();
 makerobjects = [];
 MakerToggle = false;

 geo_dist = []; //UIDと距離のリスト
 tar_get = [];
 geo_dist_arrow = []; //arrow用

 gpssetID = null;
 gpsInterval = 10000; // 10secで１回GPSをチェックする。

 JSencerToggle = true; // Stoggle()を利用しない方向で常時true
 ASencerToggle = false; 

 setEnmyPos = 0; // enemy set counter

 // checkuserのstashでサーバから送られる _はNPC用
 username = "<%= $username %>"; 
 _username_ = "<%= $username %>"; 
 uid = "<%= $uid %>"; 
 _uid_ = "<%= $uid %>"; 
 iconurl = "<%= $icon_url %>";
 iconurl = iconurl + "&resize=1";
        if ( iconurl == "" ) {
           var icon = "<%= $icon %>";
               iconurl = "/imgcomm?oid=" + icon + "&resize=1";  
           }
 email = "<%= $email %>";

 var tz = jstz.determine();

// main?
$(function(){
   //SenceToggleID = window.setInterval(Senceronoff,SencerInterval);
   // 常時起動ならタイマーは不要
   AccelSence();
   JairoSence();
   calibration();
   $("#tMaker_btn").text("Maker ON!");
   loopstart();   // gps auto start.....
  });
    wsCall(dumCall);

function Senceronoff() {
    AccelSence();
    JairoSence();
}


// map toggle
function Mtoggle(){

    if (MakerToggle) {
        MakerToggle = false;
        $("#tMaker_btn").text("Maker ON!");
    } else {
        MakerToggle = true;
        $("#tMaker_btn").text("Maker OFF!");
    }
}

// Sencer toggle
function Stoggle(){
    if (SencerToggle) {
        SencerToggle = false;
    } else {
        SencerToggle = true;
    }
    console.log("DEBUG: SencerToggle: " + SencerToggle );
}

  // リセット
function hangUp(){
         window.location.reload();
    }

function dumCall(){
       //dummy Callback...
       }

function hitEmure(){
    // Hit Emurate setting
       onCount = 3;
       console.log("DEBUG: Hit emurate!!!");

             // emurate
             var hit_tar = tar_get.filter( function(element, index){
                   console.log("DEBUG: hit count " + onCount);
                   return element.distance <  dist_shl;
                 });

                if (navigator.online == false ) {
                                 setTimeout("wsCall(dumCall)" , 1000);
                              }  // 再接続用
                hit_tar.filter( function(element, index){
                   console.log("DEBUG: HIT " + element.userid );
                   var hit_param = { to : element.userid, execute : uid, execemail : email };
                   ws.send( JSON.stringify(hit_param));
                   console.log("DEBUG: SEND hit_param " + JSON.stringify(hit_param));
                   delete hit_param;
                });

               onCount=0;
               delete hit_tar;
               // emurate
       }

// map描写 
      lat = 0;
      lng = 0;
      google.maps.event.addDomListener(window, 'load', function() {
                  map = document.getElementById("gmap");
              var options = {
                      zoom: 16,
                      center: new google.maps.LatLng(lat, lng),
                      mapTypeId: google.maps.MapTypeId.ROADMAP,
                      scaleControl: true
              };
              mapobj = new google.maps.Map(map, options);
            });

// Calc Direct
function geoDirection(lat1, lng1, lat2, lng2) {
  // 緯度経度 lat1, lng1 の点を出発として、緯度経度 lat2, lng2 への方位
  // 北を０度で右回りの角度０～３６０度
  var Y = Math.cos(lng2 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180 - lat1 * Math.PI / 180);
  var X = Math.cos(lng1 * Math.PI / 180) * Math.sin(lng2 * Math.PI / 180) - Math.sin(lng1 * Math.PI / 180) * Math.cos(lng2 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180 - lat1 * Math.PI / 180);
  var dirE0 = 180 * Math.atan2(Y, X) / Math.PI; // 東向きが０度の方向
  if (dirE0 < 0) {
    dirE0 = dirE0 + 360; //0～360 にする。
  }
  var dirN0 = (dirE0 + 90) % 360; //(dirE0+90)÷360の余りを出力 北向きが０度の方向
  return dirN0;
}

// 測地線航海算法の公式
function geoDistance(lat1, lng1, lat2, lng2, precision) {
  // 引数　precision は小数点以下の桁数（距離の精度）
  var distance = 0;
  if ((Math.abs(lat1 - lat2) < 0.00001) && (Math.abs(lng1 - lng2) < 0.00001)) {
    distance = 0;
  } else {
    lat1 = lat1 * Math.PI / 180;
    lng1 = lng1 * Math.PI / 180;
    lat2 = lat2 * Math.PI / 180;
    lng2 = lng2 * Math.PI / 180;

    var A = 6378140;
    var B = 6356755;
    var F = (A - B) / A;

    var P1 = Math.atan((B / A) * Math.tan(lat1));
    var P2 = Math.atan((B / A) * Math.tan(lat2));

    var X = Math.acos(Math.sin(P1) * Math.sin(P2) + Math.cos(P1) * Math.cos(P2) * Math.cos(lng1 - lng2));
    var L = (F / 8) * ((Math.sin(X) - X) * Math.pow((Math.sin(P1) + Math.sin(P2)), 2) / Math.pow(Math.cos(X / 2), 2) - (Math.sin(X) - X) * Math.pow(Math.sin(P1) - Math.sin(P2), 2) / Math.pow(Math.sin(X), 2));

    distance = A * (X + L);
    var decimal_no = Math.pow(10, precision);
    distance = Math.round(decimal_no * distance / 1) / decimal_no;   // kmに変換するときは(1000で割る)
  }
  return distance;
}

// 加速度センサー
function AccelSence(){
    if (ASencerToggle) {    window.addEventListener("devicemotion", devicemotionHandler, true);
          } else {
                           window.removeEventListener("devicemotion", devicemotionHandler);
          }
}

// Check Accellarator
var check_cnt = 0;
var a;

function devicemotionHandler(event) {

        a = {
        x : event.acceleration.x,
        y : event.acceleration.y,
        z : event.acceleration.z,
    };


    if ((a.x > acc_shl)||(a.y > acc_shl)||(a.z > acc_shl)||(a.x < -acc_shl)||(a.y < -acc_shl)||(a.z < -acc_shl)) {
                   onCount++;
                 };

    if ( typeof tar_get == 'undefined' ) { return; } // tar_getが未定義ならリターン

          // ２回ヒットした時にレンジ内にターゲットが居れば
          if (onCount > 2) {
             if ( tar_get.length == 0 ) { 
                 console.log("DEBUG: PASS no TARGET. onCount reset");
                 onCount = 0;
                 return;
                }

             var hit_tar = tar_get.filter( function(element, index){
                   console.log("DEBUG: hit count " + onCount);
                   return element.distance <  dist_shl; 
                 });

                if (navigator.online == false ) { 
                                 setTimeout("wsCall(dumCall)" , 1000);
                              }  // 再接続用
                hit_tar.filter( function(element, index){
                   console.log("DEBUG: HIT " + element.userid );
                   var hit_param = { to : element.userid, execute : uid, execemail : email };
                   ws.send( JSON.stringify(hit_param));
                   console.log("DEBUG: SEND hit_param " + JSON.stringify(hit_param));
                   delete hit_param;
                });
 
               onCount=0;
               delete hit_tar;
               return;
               } // if onCount

          if (onCount > 2){
                   onCount = 0;
                 };

  //  $('#output_d').text(onCount);
}

function calibration() {
      window.addEventListener("compassneedscalibration", function(event) {
          alert('Your compass needs calibrating! Wave your device in a figure-eight motion');
          event.preventDefault();
      }, true);
}

// JAIRO 
function JairoSence(){
     if (JSencerToggle) {   window.addEventListener("deviceorientation", deviceorientationHandler, true);
           } else {
                           window.removeEventListener("deviceorientation", deviceorientationHandler);
           }
}

var ALPHA;
var BETA;
var GAMMA;
var ABSO;

function deviceorientationHandler(event) {

   //   console.log("DEBUG: JAIRO START!!");

   //   console.log("DEBUG: alpha: " + event.alpha);
   //   console.log("DEBUG: beta: " + event.beta);
   //   console.log("DEBUG: gamma: " + event.gamma);
   //   console.log("DEBUG: absolute: " + event.absolute);

  // X軸
    $('#event_x').text(event.beta);
  // Y軸
    $('#event_y').text(event.gamma);
  // Z軸
     // trunsrate Noth0 and RightRound   N0r=0に固定する地図上の方角を示す
 %#    if (( event.alpha == null) || ( event.alpha == undefined )) {
 %#        N0r = 0;
 %#      } else {
 %#        N0r = (360 - event.alpha ); 
 %#      }
     //    N0r = compassHeading(event.alpha, event.beta, event.gamma);

       ALPHA = event.alpha;
       BETA = event.beta;
       GAMMA = event.gamma;
       ABSO = event.absolute;

 //   $('#event_z').text(N0r);

 //   $('#output_d').text("alpha:(-360) " + Math.ceil(N0r));
} // deviceorientationHandler

// W3C 
function compassHeading(alpha, beta, gamma) {
  var degtorad = Math.PI / 180; // Degree-to-Radian conversion

  var _x = beta ? beta * degtorad : 0; // beta value
  var _y = gamma ? gamma * degtorad : 0; // gamma value
  var _z = alpha ? alpha * degtorad : 0; // alpha value

  var cX = Math.cos(_x);
  var cY = Math.cos(_y);
  var cZ = Math.cos(_z);
  var sX = Math.sin(_x);
  var sY = Math.sin(_y);
  var sZ = Math.sin(_z);

  // Calculate Vx and Vy components
  var Vx = -cZ * sY - sZ * sX * cY;
  var Vy = -sZ * sY + cZ * sX * cY;

  // Calculate compass heading
  var compassHeading = Math.atan(Vx / Vy);

  // Convert compass heading to use whole unit circle
  if (Vy < 0) {
    compassHeading += Math.PI;
  } else if (Vx < 0) {
    compassHeading += 2 * Math.PI;
  }

  return compassHeading * ( 180 / Math.PI ); // Compass Heading (in degrees)
}

// 方角チェック 対象メンバーをリストアップ
function direct_distance(){
     if ( typeof N0r == 'undefined'){ 
            console.log("DEBUG: N0r: undefined");
            return; 
           }

         tar_get.splice(0,tar_get.length); // data delete

      // tar_getに対象オブジェクトが格納される配列
         tar_get = geo_dist.filter( function ( element, index ){
      //   if (( element.direction < N0r + 20 && element.direction > N0r - 20) && (element.distance < dist_shl)){ 
      //          console.log("DEBUG: " + element.userid + ": " + element.direction + " : " + element.distance );
      //      };
      //   return ((element.direction < N0r + 20 || element.direction > N0r - 20 ) && (element.distance < 20));
         return (element.distance < 20);
         });
 
     if ( tar_get.length != 0 ) {
        console.log("DEBUG: tar_get list found");

        var debug = JSON.stringify(tar_get[0]);
        console.log("DEBUG: " + debug );

        } else {
        console.log("DEBUG: tar_get list NOT found");
        }

}

// loopスタート
function loopstart(){
        gpssetID = window.setInterval(keyInput,gpsInterval); // loop set
}

// エネミー初期化
function enmset(){
        var enm_url = "https://westwind.backbone.site/ghostman/gaccput" ;
        // キックするだけ
        $.ajax({
          type : 'post',
          url : enm_url,
          data : {
              "c" : 1,
              "lat" : lat,
              "lng" : lng,
              }
          });
    };

// カウント取得
function pointget(){
        var cnt_url = "https://<%= $url_host %>/walkworld/pointget";

        $.ajax({
            type : 'get',
            url : cnt_url,
            dataType : 'json',
            success : respointget,
        });
}

function respointget(data){

 //   var samp = JSON.stringify(data);
 //   console.log("DEBUG: countpoint: " + samp );
    $('#user_points').text(data.count);

 //     var samp = JSON.stringify(data.gscore);
      var gscore = data.gscore;
 //     console.log("DEBUG: gscore: " + samp);
      $("#output_gscore").empty();
      for ( var i=0; i<gscore.length; i++ ){
            $('#output_gscore').append("<p><li>" + gscore[i].count + "<img src='" + gscore[i].icon_url + "' width='50' height='50'>" + gscore[i].username + "</li></p>");
      }

}


  // GPS get  aCallback is dummy callback for Promise
function gpsset(aCallback){
    if (navigator.online == false ) {  setTimeout("wsCall(dumCall)" , 1000); }  // ブラウザがスリープするとws_statが判断しないので、
    getPosition(aCallback);
    direct_distance();
    if (! gpssetID) { loopstart(); }  // idがなければ起動
    }


function getPosition(aCallback){
    console.log("getPosition START!!!");

    var geoOptions = {
        enableHighAccuracy: true,   //高精度要求
        timeout: 6000,          //タイムアウト(ミリ秒)
        maximumAge: 0       //キャッシュ有効期限(ミリ秒)
    }
    var watchID =  navigator.geolocation.watchPosition(successCallback, errorCallback,geoOptions);

    function successCallback(position) {

          // MAP表示センター指定
          lat = position.coords.latitude;
          lng = position.coords.longitude;

          gpslocal_pos = {"gpslocation": {"latitude": position.coords.latitude,
                                          "longitude": position.coords.longitude,
                                          "altitude": position.coords.altitude,
                                          "accuracy": position.coords.accuracy,
                                          "altitudeAccuracy": position.coords.altitudeAccuracy,
                                          "heading": position.coords.heading,
                                          "speed": position.coords.speed
                                        }};

         // console.log("GPS:" + JSON.stringify(gpslocal_pos) );

    var timerecord = Date.now();

   // USER_STAT
          user_stat = {   
                       geometry: {
                                  type : "Point",
                                  coordinates : [ position.coords.longitude, position.coords.latitude ]
                                  },
                       loc : { lat : position.coords.latitude ,
                               lng : position.coords.longitude
                             },
                       name : username,
                       userid : uid,
                       status : "dummy",
                       category : "USER",
                       time : timerecord,
                       icon_url : iconurl,
                       category : "USER",
                      };

      //    console.log("user_stat:" + JSON.stringify(user_stat) );
      //    console.log("Send user_stat#######");

          if (navigator.online == false ) {
                               setTimeout("wsCall(dumCall)" , 1000); 
                       }  // 再接続用
          ws.send(JSON.stringify(user_stat));

      // var bytesArray = new Uint8Array(user_stat);
      //    ws.send(bytesArray.buffer);

     // 再描写用 GPSの座標をセンターに再描写
             var opt2 = { center: new google.maps.LatLng(lat, lng)};
       //      var opt2 = { center: new google.maps.LatLng(lat, lng), zoom: 18 };
             mapobj.setOptions(opt2);

     // 追跡の停止
         navigator.geolocation.clearWatch(watchID);

     // Marker Set
         console.log("Marker SET");

                  makerobj.setMap(null);
           
             var tar_get_npc = tar_get.filter( function(e,i){
                    return e.category == "NPC";
                 });
       
             var hit_tar = tar_get_npc.filter( function(element, index){
                   console.log("DEBUG: hit count " + onCount);
                   return element.distance <  dist_shl;
                 });

                  makerobj = new google.maps.Marker({
                               position: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                               map: mapobj,
                               title: "mySelf",
                          });
      
               if (typeof hit_tar[0] !== 'undefined'){
                  image = 'https://<%= $url_host %>/img/target_icon.png';  
                  makerobj.setMap(null);
                  makerobj = new google.maps.Marker({
                               position: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                               map: mapobj,
                               title: "mySelf",
                               icon : image
                          });
                  } 

                   console.log("Marker:" + position.coords.latitude + "|" + position.coords.longitude);
                  delete hit_tar;

          aCallback(); // for promise
    }  // successCallback

    function errorCallback(error) {
      var err_msg = "";
      switch(error.code)
        {
        case 1:
          err_msg = "位置情報の利用が許可されていません";
          break;
        case 2:
          err_msg = "デバイスの位置が判定できません";
          break;
        case 3:
          err_msg = "タイムアウトしました";
          break;
      }
      //  alert(err_msg);
      console.log("DEBUG: " + err_msg);
      return;
     }

}  //getPosition

// チャットからユーザの位置へmapを一時的に移す
function centerMap(alat,alng) {

            var opt2 = {
                       zoom: 16,
                       center: new google.maps.LatLng(alat, alng)
                       };

            mapobj.setOptions(opt2);

            var latlng = new google.maps.LatLng(alat,alng);
            console.log("DEBUG: LatLng: " + JSON.stringify(latlng));

          //   mapobj.setCenter(new google.maps.LatLng(alat, alng));
          //   mapobj.setCenter(latlng);
             mapobj.panTo(latlng);
             console.log("DEBUG: centerMap: " + alat + "|" + alng);
}

// WebSocket
function wsCall(aCallback){
      ws = new WebSocket('wss://<%= $url_host %>/walkworld');
      console.log("DEBUG: ws Connect!!");
      $('#output').text("online");
      aCallback();
  } 

    ws.onopen = function(){
        console.log('Connection opened');
    }

    ws.onclose = function(){
        console.log("Close: WebSocket Close");
        $('#output').text("reConnect");
        setTimeout("wsCall(dumCall)" , 1000);
    }

    ws.onerror = function(){
       alert("please Reload, Reconnect websocket!");
        $('#output').text("Error....!!");
    }

// オンメッセージ処理 --------------------------------------------
    ws.onmessage = function(msg){
        var evt = JSON.parse(msg.data);
            console.log("evt: msg: " + msg.data ); 
     //       console.log("evt: point: " + JSON.stringify(evt.pointlist));
     //       console.log("evt: chat: " + JSON.stringify(evt.chat));

            if ( evt == ""){ return; }

         <!-- ChatScreen -->
            if ( evt.chat ) {
            $("#output_chat").prepend("<li><button><img src='" + evt.icon_url + "' width='50' height='50'> [" + "<a href=\"javascript:void(0)\" onclick=\"centerMap(" + evt.loc.lat + "," + evt.loc.lng + ")\">" + evt.username + "</a>" + "] " + "[" + evt.hms + "] " + evt.chat + "</button></li>");


     //       $("#output_chat").prepend("<li><button><img src='" + evt.icon_url + "' width='50' height='50'> [" + evt.username + "] " + "[" + evt.hms + "] " + evt.chat + "</button></li>");
     //       $("#output_chat").prepend("<li><button><img src='" + evt.icon_url + "' width='50' height='50'> [" + "<a href=\"https://map.google.co.jp/maps?q=" + evt.loc.lat + "," + evt.loc.lng + "\" rel=\"external\" target=\"_blank\">" + evt.username + "</a>" + "] " + "[" + evt.hms + "] " + evt.chat + "</button></li>");

                 return;
              } // if evt.chat

            console.log("Chat: latlng:" + lng + ":" + lat); /////////////////////////////////////

             $('#msg').keydown(function (e) {
                 if (e.keyCode == 13 && $('#msg').val()) {
                 if (navigator.online == false) { setTimeout("wsCall(dumCall)" , 1000);}
                 var chatmsg = { 
                                 chat : $('#msg').val(),
                                 geometry: {
                                      type : "Point",
                                      coordinates : [ lng, lat ]
                                           },
                                 loc : { lat : lat ,
                                         lng : lng
                                        },
                                 timezone : tz.name() ,
                               };

                     chatmsg = JSON.stringify(chatmsg);
                 console.log("DEBUG: chatmsg: " + chatmsg);
                 ws.send(chatmsg);
                 $('#msg').val('');
                    }
                });

            // 録音終了時トリガー
          %#      recognition.addEventListener('result', function(event){
          %#      var text = event.results.item(0).item(0).transcript;
          %#      $("#msg").val(text);
          %#      if (ws.readyState != 1) { setTimeout("wsCall(dumCall)" , 1000);} //remain readyState
          %#      var chatmsg = { 
          %#                      chat : $('#msg').val(),
          %#                      geometry: {
          %#                           type : "Point",
          %#                           coordinates : [ lng, lat ]
          %#                                },
          %#                       loc : { lat : lat ,
          %#                               lng : lng
          %#                              },
          %#                      timezone : tz.name() ,
          %#                    };
          %#
          %#           chatmsg = JSON.stringify(chatmsg);
          %#
          %#      ws.send(chatmsg);
          %#      $('#msg').val('');
          %#      }, false);

         <!-- ChatScreen -->
         <!-- Trapevent -->
          if ( evt.trapmessage ) {
             console.log("DEBUG: get trapmessage"); 

             var trapmess = new Array;
                 trapmess = evt.trapmessage;             
             console.log("DEBUG: trapmess:" + JSON.stringify(trapmess) );

          var messobjs = new Array;

          //message maker setting
             trapmess.filter(function(e,i){
            //   console.log("DEBUG i: " + i + "-----------");
               messobjs.push( new google.maps.Marker({
                              position: new google.maps.LatLng( e.loc.lat, e.loc.lng ),
                                   map: mapobj,
                                 title: e.message,
                                  icon: 'https://<%= $url_host %>/img/eventpoint.png'
                          }));
                 }) // trapmess filter

        var makersinfowindow = new Array;

        // InfoWindow add
        trapmess.filter(function(e,i){
           makersinfowindow.push( new google.maps.InfoWindow({
                                   content : e.message + "|" +  e.email
                                 }));
           messobjs[i].addListener('click', function(){
                            makersinfowindow[i].open(mapobj, messobjs[i]);
                       });
        }) //trapmess filter

        return;
        } // if trapmessage
         <!-- Trapevent -->

        //walkchatを追加した結果、書く位置を変更
          if ( evt.to == user_stat.userid ) { return; } // 攻撃対象にユーザがなった場合、イベントをスルーする。
          if ( evt.execute ) { return; } // 攻撃イベントをスルーする。

        console.log("DEBUG: makerobjects: " + makerobjects.length);
        // makerobjectsの初期化
            while ( makerobjects.length > 0){
                var mkobj = makerobjects.shift();
                console.log("DEBUG: marker delete " + mkobj.title);
                mkobj.setMap(null);
                }

        var plist = evt.pointlist;

    %#    if ( ! plist ){
    %#        console.log("DEBUG: plist is NULL!!!!");
    %#        return;
    %#    }

        // 自分を除外する。 ユーザーも除外する MAP上で他のユーザは表示しない
        var plist_nonself = plist.filter( function( element, index) {
                 // return element.userid != uid; 
                  return element.category != "USER";
                          });


        // サーバで重複排除したので、単純にコピーのみに表示用
        var plist_nd = plist_nonself.filter( function (element, index){
                         return element;
                        });

        // Makerを除外する。
        var plist_nonmaker = plist_nonself.filter( function( element, index) {
                  return element.name != "maker"; 
                          });
        // ユーザを除外する（NPC判定）
        var plist_nonuser = plist_nonmaker.filter( function( element, index) {
                  return element.category == "NPC";
                          });

        // USERを抽出 
        var plist_user = plist_nonself.filter( function( element, index) {
                  return element.category == "USER"; 
                          });
        var unitcnt = plist_user.length + 1;

        if ( plist_user.length < 1 ) { 
            unitcnt = 5;
        } else if ( plist_user.length == 2 ) {
            unitcnt = 6;
        } else if ( plist_user.length == 3 ) {
            unitcnt = 7;
        } else if ( plist_user.length == 4 ) {
            unitcnt = 8;
        } else if ( plist_user.length >= 5 ) {
            unitcnt = 10;
        }

        // 自動エネミーセットチェック NPCがuserunit以下なら追加で起動する
        if ( plist_nonuser.length <= unitcnt ) {
           setEnmyPos++;
           console.log("DEBUG: setEnmyPos:" + setEnmyPos);
           if ( setEnmyPos > 2 ){
              enmset();
              console.log("DEBUG: Enemy Set.....");
              }
           } else { setEnmyPos = 0; }

          // 60秒前の時刻を取得して
//          var leaptime = Date.now();
//              leaptime = leaptime - 60000;

          // 除外リストを作成
//          var plist_lep = plist_nonself.filter(function (l, ip, self){
//                  console.log("DEBUG: plist_lep: " + l.name + ":"+ l.time + " " + leaptime);
//                  return l.time > leaptime; 
//              });
          // indexOfで除外リストと比較
//          var plist_nd = plist_nonself.filter(function ( element, index ){
//                  if ( element === plist_lep[plist_lep.indexOf(element)]) {
//                                               console.log("DEBUG: drop " + element.name);
//                                               return -1;
//                      } else { 
//                               console.log("DEBUG: through: " + element.name);  
//                               return; }
//                  });


          // 10秒対応の為に、timeでsortして、サーバ側で対応して不要になった
//              plist_nonself.sort(function(a,b){
//                           return ( a.time > b.time ? 1 : -1 );
//                           });
           // uidを抽出して
//           var nlist = [];
//               plist_nonself.filter(function(x,i){
//                          nlist.push(x.userid);
//                          });
//               console.log("DEBUG: nlist:" + nlist);

           // uidの重複を排除 位置、indexを記録する
//           var nlist_indexes = [];
//                      nlist.filter(function(x,i,self){
//                          if ( self.indexOf(x) == i ) { nlist_indexes.push(i); }
//                          });
//            console.log("DEBUG: nlist_indexes:" + nlist_indexes);

          // indexで抽出する
//            var plist_nd = [];
//                for (var ind in nlist_indexes){
//                          plist_nd.push(plist_nonself[ind]);
//                    } // for

         //  console.log("DEBUG: plist_nd: " + JSON.stringify(plist_nd) );

           // plist_ndはマップで利用するのでコピーする
           var cp_plist_nd = JSON.parse(JSON.stringify(plist_nd));

              geo_dist.splice(0,geo_dist.length); // delete data
              geo_dist_arrow.splice(0,geo_dist_arrow.length); // delete data

          // 距離と方角をチェックしてリスト化  ターゲット用はユーザを含む
              cp_plist_nd.filter ( function ( element, index ){
                 if ( element.name == username ) { return; }
                 if ( element.name == "maker" ) { return; }
                 var p_dist = geoDistance( user_stat.loc.lat, user_stat.loc.lng, element.loc.lat, element.loc.lng, 6 );
                 var p_direc = geoDirection ( user_stat.loc.lat, user_stat.loc.lng, element.loc.lat, element.loc.lng);
                 var p_key = { userid : element.userid, distance : p_dist, direction : Math.ceil(p_direc), category : element.category };
                 geo_dist.push(p_key);
              });
           // arrow用リスト ghostのみ
              plist_nonuser.filter ( function ( element, index ){
                 var p_dist = geoDistance( user_stat.loc.lat, user_stat.loc.lng, element.loc.lat, element.loc.lng, 6 );
                 var p_direc = geoDirection ( user_stat.loc.lat, user_stat.loc.lng, element.loc.lat, element.loc.lng);
                 var p_key = { userid : element.userid, distance : p_dist, direction : Math.ceil(p_direc) };
                 geo_dist_arrow.push(p_key);
              });
              
              var debugtext = JSON.stringify(geo_dist_arrow);
              console.log("DEBUG: geo_dist_arrow:" + debugtext );

        // 警告バイブレーション　100m以下
             var tar_buz = geo_dist_arrow.filter ( function ( element, index ){
                 return element.distance < 100; 
                 });

            if ( tar_buz.length != 0 ){
                navigator.vibrate([300, 100]);
          %#      // SencerToggle
          %#      if ( ! SencerToggle){ Stoggle();}
          %#     } else {
          %#          // tar_buz.length=0
          %#          if ( SencerToggle ) { Stoggle();}
               }

          // 近距離の方角を抽出
             var min_dist = Math.min.apply(null, geo_dist_arrow.map(function(o){return o.distance}));

             var distobj = geo_dist_arrow.filter( function (element, index) {
                     return (element.distance == min_dist);
                 });

             var arrow_d;

        %#     if ( ! distobj[0].direction ) {

             var tmp_arrow = distobj[0].direction - N0r;
             if ( 0 > tmp_arrow ) {
                arrow_d = N0r - tmp_arrow;
                } else { arrow_d = N0r + tmp_arrow; }

             if ( distobj[0] ) {
                 console.log("DEBUG: direction:" + distobj[0].direction ); //ghostが居ないとエラーになる
                 }

             $('#output_d').text(Math.ceil(distobj[0].distance));

         %#    }  // distobj[0].direction

             console.log("DEBUG: N0r:" + N0r );
             console.log("DEBUG: arrow:" + arrow_d );
             console.log("-------------------------");
             console.log("DEBUG: alpha: " + ALPHA );
             console.log("DEBUG: beta: " + BETA );
             console.log("DEBUG: gammma: " + GAMMA );
             console.log("DEBUG: absolute: " + ABSO );
             
          %#   console.log("DEBUG: userid:" + distobj[0].userid );
          %#   console.log("DEBUG: distance:" + distobj[0].distance );
          %#   console.log("DEBUG: distobj:" + JSON.stringify(distobj) );

          // 方向指示表示

             if ( arrow_d ){ 
                 $("#arrow").css({
                     "transform" : "rotate(" + arrow_d + "deg)",
                    })
             }
             if ( N0r ){ 
                 $("#arrow2").css({
                     "transform" : "rotate(" + N0r + "deg)",
                    })
             }

        // plist,uplist共通処理
        var pcount = plist_nd.length;

        for ( var i=0; i < pcount; i++){
           var point = plist_nd[i]; 
        //   console.log("DEBUG: point " + JSON.stringify(point));
           if ( point.name == username ) { 
                                  console.log("DEBUG: Pass this point");
                                  continue;
                   }

               console.log("DEBUG: setMaker: " + makerobjects.length);
               makerobjects.push( new google.maps.Marker({
                              position: new google.maps.LatLng(point.loc.lat, point.loc.lng),
                               map: mapobj,
                               title: point.name,
                               icon: point.icon_url
                          }));
        } //for i
               console.log("DEBUG: setMaker After " + makerobjects.length);

             // inVisible Maker Ghosts
             makerobjects.filter( function(element,index){
                     element.setVisible(MakerToggle);
             });

   } // ws.onmessage -----------------------------------------------------------------

// key input
function keyInput(){

           pointget();  
      //     AccelSence();  // on/offが切り替わる
      //     JairoSence();
           calibration();

           // Accelarator Check
           if (( a == undefined )||( a.x == null )){
              check_cnt++;
              if ( check_cnt == 1 ) {
              %#    alert("Shake not SUPPORT Device ,USE 'HIT Emurator Support' AND Arrow UP to North");
                  $("#emuon").prop("disabled", false);
              }
           }


           console.log("DEBUG: keyInput call. push or Interval");
           if (ws.readyState == 1 ) {
                $('#output').text("online");
               } else {
                $('#output').text("OFFLINE!!!");
                alert("Reload page!!!!");
           }
       var fetchgps = new Promise(function(resolv){

           if ( navigator.online == false ) {
               setTimeout("wsCall(resolv)" , 1000); 
              } else { resolv(); }

            });
           fetchgps.then(function(){

               gpsset(dumCall);

           });
}



// sound input
   %# for safari
%# window.SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition;
%# var recognition = new webkitSpeechRecognition();
%# recognition.lang = 'ja';

// 録音開始
function record()
{
    recognition.start();
}

function setPointMaker(){
    // pointMaker set
    var timerecord = Date.now();

    var maker_stat = {
                       geometory : {
                                    type:"point",
                                    coordinates : [ lng,lat ] 
                                   },
                             loc : { 
                                     lat : lat,
                                     lng : lng
                                             },
                          name : "maker",
                          userid : "",
                          category : "MAKER",
                          status : "Dummy",
                          time : timerecord,
                          icon_url : "/img/lighthouse3.png",
                     }

    var putmaker = { putmaker : maker_stat};

        ws.send(JSON.stringify(putmaker)); 
}

function setEventTrap(){
    // EventMaker
    var evobj_stat = {
                     location : {
                                    type:"Point",
                                    coordinates : [ lng , lat ]
                                   },
                     loc : {
                                     lat : lat,
                                     lng : lng
                                             },
                     name : "mine",
                     status : "everyone",
                     ttl : "",
                     message : "TRAPに引っかかった！！！",
                     email : email,
                     };

    var eventmaker = { eventmaker : evobj_stat };

    ws.send(JSON.stringify(eventmaker));
}

function setEventMess(){
    // EventMessage set

    var evobj_stat = {
                     location : {
                                    type:"Point",
                                    coordinates : [ lng , lat ]
                                   },
                     loc : {
                                     lat : lat,
                                     lng : lng
                                             },
                     name : "message",
                     status : "everyone",
                     ttl : "",
                     message :  $('#msg').val(),
                     email : email,
                     };

    var eventmess = { eventmaker : evobj_stat };

    ws.send(JSON.stringify(eventmess));
    $('#msg').val('');

}



</script>

<div id="hantei" data-role="page" style="background-color: #aac78d;">
    <div data-role="header">
        <a href="#panel" data-icon="bars" data-iconpos="notext" class="ui-btn-left">panel</a>
        <h1>散歩world</h1>
        <a href="#r_panel" data-icon="info" data-iconpos="notext" class="ui-btn-right">Attack</a>
    </div>

<div data-role="tabs" id="tabs">
    <div data-role="navbar">
        <ul>
           <li><a href=#map data-ajax="false">MAP</a></li>
           <li><a href=#voice data-ajax="false">Voice in Chat</a></li>
        </ul>
    </div> <!-- navbar -->
    <div id="map">
<!-- panel left -->
  <div data-role="panel" id="panel" data-display="overlay" style="background-color: #aac78d;">
%#    <button type="button" class="ui-btn " onclick="gpsset(dumCall);">GPS Enable</button>
%#    <button type="button" class="ui-btn " onclick="enmset();">Ghost Set</button>
%#    <button type="button" class="ui-btn " onClick="setPointMaker();">PUT Tower</button>
%#    <button type="button" class="ui-btn " onClick="setEventTrap();">PUT EventTrap</button>
    <button type="button" class="ui-btn " onclick="Mtoggle();" id="tMaker_btn"></button>
    <button type="button" class="ui-btn " onclick="hangUp();" style="background-color: #ff1111; color: #ffff00">Restart</button>
   <!-- chatScreen -->
    <div style="overflow: scroll; width: 250px; height: 400px; border: 1px solid">
        <p><input type="text" id="msg" placeholder="message..."></p>
%#        <p><input type="button" disabled="disabled" onClick="record()" value="SOUND INPUT" /></p>
        <p><input type="button" onClick="setEventMess()" value="PUT Message Event" /></p>
        <ul id="output_chat" data-role="listview" data-inset="true"></ul>
    </div>
  </div>
<!-- panel right -->
  <div data-role="panel" id="r_panel" data-display="overlay" data-position="right" style="background-color: #aac78d;">
    <p>討伐数：<a id="user_points"></a></p>
        <ul id="output_gscore" data-role="listview" data-inset="true"></ul>
  </div>
  <div id="gmap" class="mapbase" style="width : 100%; height : 360px;"></div>
  <div class="ui-grid-a">
%#    <div class="ui-block-a"><div class="ui-bar"  style="hight: 60px"><button type="button" class="ui-btn " onClick="keyInput();" style="background-color: #aac78d; font-size: x-small;"><img id="arrow2" class="arrow2" src="/img/arrow.png" width="45" hight="45"/><img id="arrow" class="arrow" src="/img/cyrclearrow_mos.png" width="45" hight="45"/><BR>Head | ghost</button>
    <div class="ui-block-a"><div class="ui-bar"  style="hight: 60px"><button type="button" class="ui-btn " onClick="keyInput();" style="background-color: #aac78d; font-size: x-small;"><img id="arrow" class="arrow" src="/img/cyrclearrow_mos.png" width="45" hight="45"/><BR>gps</button>
    </div> <!-- ui-block-a -->
    </div> <!-- ui-grid-a -->
    <div class="ui-block-b" style="background-color: #aac78d;">
                          <div class="ui-bar"  style="hight: 60px">
                               Network：<text id="output"></text>
                          %#     Distance : <text id="output_d"></text>
                          </div>
            <div data-role="collapsible" data-mini="true" style="background-color: #aac78d;">
             <h4>Commands</h4>
                <ul data-role="listview" style="background-color: #aac78d;">
                <button id="emuon" type="button" class="ui-btn" onClick="hitEmure();" style="background-color: #aac78d;" disabled='disabled'>Exorcise Strike</button>
                <button type="button" class="ui-btn " onClick="setPointMaker();" style="background-color: #aac78d;" >PUT Tower</button>
                <button type="button" class="ui-btn " onClick="setEventTrap();" style="background-color: #aac78d;" >PUT EventTrap</button>
             %#   <a href="#popupdiv" data-rel="popup" class="ui-btn" style="background-color: #aac78d;" >PUT Message Event</a>
                </ul>
            </div> <!-- collapsible -->
    </div>
  </div> <!-- ui-grid-a -->
  <!--- popup -->
      <div data-role="popup" id="popupdiv" class="ui-content">
        <p><text id="eventmessage" ></p>
      </div>
  <!--- popup -->
  <div style="border: 1px solid; background-color: #bbd89e;"><text id="textarea"></text></div>

  </div> <!-- #map -->
  <div id="voice">
    <object type="text/html" data="https://<%= $url_host %>/voicechat2n" style="width : 100%; height : 360px;" alt="objectに対応していない場合はこれが表示される">
  %#  <object type="text/html" data="https://<%= $url_host %>/menu/chatopen" style="width : 100%; height : 360px;" alt="objectに対応していない場合はこれが表示される">
    </object>
  </div>
</div> <!-- tabs -->

    <div data-role="footer" style="backgroud: #aac78d;">
    <a href="/" class="ui-btn ui-btn-inline" rel='external'>top</a>
    <a href="/menu" class="ui-btn ui-btn-inline" rel='external'>menu</a>
    </div>
</div>

