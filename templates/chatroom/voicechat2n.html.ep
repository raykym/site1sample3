% layout 'mobidef2';
% title 'Voice Chat';
<script type="text/javascript">

%#if ((! navigator.webkitGetUserMedia)||(! navigator.mediaDevices.getUserMedia)) {  alert("Not Supported!!!"); }

    // websocket
    var socketReady = false;

    var ws = null;
    ws = new WebSocket('wss://<%= $url_host %>/wsocket/webpubsub');

    var socket_wait = null;

    ws.onopen = function(){
        console.log('Connection opened');
        socketReady = true;

    socket_wait = setInterval(function (){
       var dummsg = {"dummy":"dummy"};
       ws.send(JSON.stringify(dummsg)); 
       console.log("socket wait sending!");
        }, 50000);

       autoentry();

       %# imgchat
       fetchupload = Promise.resolve();

    };

    ws.onclose = function(){
        socketReady = false;
        clearInterval(socket_wait); // 50sec dummy STOP
        console.log("Close:" + socketReady);
        alert("please Reload, Reconnect websocket! ADD MEMBER LIMIT BUT WEBRTC CONNECTION OK!"); 
    };

    ws.onerror = function(){
       alert("please Reload, Reconnect websocket!"); 
    };

    var connid = null;

    var startflg = null; //localstream用フラグ

    %# call()でボタンの押し間違いをチェックする ready判定用だったリストを表示用リストに転用
    var memberlist = new Array;
    var memlist_diff = new Array;

    ws.onmessage = function(msg){
                var evt = JSON.parse(msg.data);
                console.log(JSON.stringify(evt));
        %#        console.log("evt.from:" + evt.from);
        %#        console.log("evt.type:" + evt.type);
        %#        console.log("evt.reslist:" + evt.reslist);

                  %# 表示用リスト
                var memlist = evt.reslist;

                console.log("memlist:" + memlist);

                %# リスト表示用処理
           if (evt.type === 'reslist'){

                %# memberlistは差分を追加していく
                if ( memberlist.length == 0) { 
                                         memberlist = JSON.parse(JSON.stringify(memlist)); 
                                         memlist_diff = JSON.parse(JSON.stringify(memlist)); // 初回は全部が差分
                    } else {
                        %# memlistからmemberlistとの重複を除外した差分リストを作成 

                           memlist_diff = []; // 差分リストの初期化

                           var tmplist = JSON.parse(JSON.stringify(memberlist)); //copy
                        %# memberlistとmemlistをマージしたtmplistを作成
                               memlist.filter(function(e, i){
                                       tmplist.push(e);
                                    });

                               console.log("DEBUG: tmplist: " + JSON.stringify(tmplist) );

                         %# 重複を判定しているが、判定されないものだけを差分としてpushで取得している。
                                tmplist.filter(function(e, i, self) {
                                          if (self.indexOf(e) !== self.lastIndexOf(e)) return;
                                          memlist_diff.push(e);  // returnをすり抜けたらpush
                                    }); 

                           memlist_diff_cp = JSON.parse(JSON.stringify(memlist_diff)); //copy
                        var oldlist = new Array;

                         %# 再接続の場合、リストに２重登録が起きるので、memlist_diffからmemberlist内を除外する
                                memberlist.filter( function(e,i){
                                 oldlist = memlist_diff_cp.filter( function( e2, i2 ){
                                           if ( e === e2 ) { 
                                                  memlist_diff.splice(i2,1);  // memlist_diffの重複したindexを除外
                                                  return e;
                                                  }
                                        });
                                });

                        console.log("DEBUG: memlist_diff: " + JSON.stringify(memlist_diff) );

                        %# memberlistにdiffを追加する
                           memlist_diff.filter(function( element, index ){
                                    memberlist.push(element);
                                  });
                   } // if memberlist.length

                  connid = evt.from;   // global定義
        %#        console.log("view connid:" + connid);
        %#        console.log("memlist.length:" + memlist.length);

                %# oldlistを削除する。
                  if (typeof oldlist !== 'undefined') {
                   if ( oldlist.length != 0 ){
                   for ( var i=0 ; i < oldlist.length ; i++){
                       var delline = oldlist[i];
                           delline = JSON.parse(delline);

                    $("#userlist").remove("<li><button><img src='" + delline.icon_url + "' width='50' height='50'>[" + delline.username + "]<audio id=" + delline.connid +" autoplay controls></audio></button></li>");
                      } // for
                   } //if length
                   } //if defined

                %# 差分だけ画面に追加する    
                for (var i=0 ; i< memlist_diff.length; i++ ){

                    var resline = memlist_diff[i];
                        resline = JSON.parse(resline);

         %#           console.log("username:" + resline.username);
         %#           console.log("icon_url:" + resline.icon_url);
         %#           console.log("ready:" + resline.ready);
         %#           console.log("sessionid:" + resline.sessionid);
         %#           console.log("connid:" + resline.connid);
         %#           console.log("gpslocation:" + resline.gpslocation);

                    $("#userlist").append("<li><button><img src='" + resline.icon_url + "' width='50' height='50'>[" + resline.username + "]<audio id=" + resline.connid +" autoplay controls></audio></button></li>");
                    
                } // for

       %# 最初のメンバーリストが届いた時にローカルストリームをスタートする。
       if ( startflg === null){
            startflg = "started";
        %# ユーザリストからaudioエレメントを取得する
            startvoice();
           }
             }  // type reslist

          if (evt.type === "reloadmember"){
              %# 他のメンバーのstandbyを確認する リロードするとローカルストリームが切れるので再スタート
              member();
              startvoice();
              return;
          }

          if ( evt.type === "reloadimg"){
             %# putfileimgでuploadした時に、サーバ側からpushされる
            console.log("DEBUG: reloadimg on message...");

            var roomname = $('#roomname').val();
            var roomname_b64url = window.btoa( unescape(encodeURIComponent( roomname )) );
            var src="https://<%= $url_host %>/reloadimg?room=" + roomname_b64url;

            $('#imgchat').attr("src","");
            $('#imgchat').attr("src",src);
            return;
          }


    // SDP,ICE処理 
    var id = evt.from;
    var target = evt.sendto;  // call時はundef

        console.log("id:(from)" + id);
        console.log("target:(sendto)" + target);

       if (evt.type === 'call') {
            console.log('Receive call');

           if (isConnectPossible()) {
             %# callを受信したら、responseを返す
              var resp = JSON.stringify({"type":"response","sendto":id});
              ws.send(resp);
              console.log("send response----->");
              }
              else {
                  console.warn('max connections. so ignore call');
              }
              return;
              }
              else if (evt.type === 'response'){
                console.log('Receive response');
                sendOffer(id);
                return;
            }  else if (evt.type === 'offer') {
              console.log("Received offer, set offer, sending answer....")
              onOffer(evt);

            } else if (evt.type === 'answer') {  // **
              console.log('Received answer, settinng answer SDP');
              onAnswer(evt);
            } else if (evt.type === 'candidate') { // **
              console.log('Received ICE candidate...');
              onCandidate(evt);
            } else if (evt.type === 'bye') { // **
              console.log("disconnected");
              //stop();
              detachvoice(id); // force detach video
              stopConnection(id);
           }
     } //onmessage

// start local audio
function startvoice() {
    console.log('Start local Media');

  %#  navigator.webkitGetUserMedia({video: false, audio: true},
  %#  navigator.webkitGetUserMedia({video: false, audio: {mandatory: {echoCancellation : false, googEchoCancellation: false}} },
  %#  function (stream) { // success
  %#    localStream = stream;
  %#  },
  %#  function (error) { // error
  %#    console.error('An error occurred: [CODE ' + error.code + ']');
  %#    return;
  %#  }
  %#  );
     %# promise rewrite!!
    navigator.mediaDevices.getUserMedia({video: false, audio: {mandatory: {echoCancellation : true, googEchoCancellation: true}} })
    .then( function (stream) { // success
      localStream = stream;
    })
    .catch( function (error) { // error
      console.error('An error occurred: [CODE ' + error.code + ']');
      return;
    });

} // startvoice

  function getConnectionCount() {
    var count = 0;
    for (var id in connections) {
      count++;
    }

    console.log('getConnectionCount=' + count);
    return count;
  }

  function isConnectPossible() {
    var MAX_CONNECTION_COUNT = 5;
    if (getConnectionCount() < MAX_CONNECTION_COUNT)
      return true;
    else
      return false;
  }

  function sendOffer(id) {
    var conn = getConnection(id);
    if (!conn) {
      conn = prepareNewConnection(id);
    }
%#    conn.peerconnection.createOffer(function (sessionDescription) { // in case of success
%#      conn.iceReady = true;
%#      conn.peerconnection.setLocalDescription(sessionDescription);
%#      sessionDescription.sendto = id;

      %# SDPにsendtoが付加出来ないのでコピーして付加し直す。
%#      var cpsdp = JSON.parse(JSON.stringify(sessionDescription));
%#          cpsdp.sendto = id;
%#      var newsdp = JSON.parse(JSON.stringify(cpsdp));

%#      sendSDP(newsdp);
%#    }, function () { // in case of error
%#      console.log("Create Offer failed");
%#    }, mediaConstraints);
    %# promise rewrite
    conn.peerconnection.createOffer()
      .then( function (sessionDescription) { // in case of success
      conn.iceReady = true;
      conn.peerconnection.setLocalDescription(sessionDescription);
      sessionDescription.sendto = id;

      %# SDPにsendtoが付加出来ないのでコピーして付加し直す。
      var cpsdp = JSON.parse(JSON.stringify(sessionDescription));
          cpsdp.sendto = id;
      var newsdp = JSON.parse(JSON.stringify(cpsdp));

      sendSDP(newsdp);
    }).catch( function () { // in case of error
      console.log("Create Offer failed");
    }, mediaConstraints);
    conn.iceReady = true;
  }

  // ---------------------- connection handling -----------------------
  function prepareNewConnection(id) {
%#    var pc_config = {"iceServers":[]};
%#    var pc_config = {"iceServers":[{"url":"stun:stun.l.google.com:19302"}]};
%#    var pc_config = {"iceServers":[{"url":"stun:instance-1.backbone.site:5349"}]};
%#    var pc_config = {"iceServers":[{"url":"turn:instance-1.backbone.site:5349","username":"debiansv","credential":"0xb7b9c73f9cba1d0f51454edec4fac01a"}]};

      var pc_config = {"iceServers":[
                              { urls: "stun:instance-1.backbone.site:5349"},
                              { urls: "turn:instance-1.backbone.site:5349", username: "debiansv", credential: "0xb7b9c73f9cba1d0f51454edec4fac01a"},
                      ]};


    var peer = null;
    try {
   %#   peer = new webkitRTCPeerConnection(pc_config);
      peer = new RTCPeerConnection(pc_config);
    } catch (e) {
      console.log("Failed to create PeerConnection, exception: " + e.message);
    }
    var conn = new Connection();
    conn.id = id;
    conn.peerconnection = peer;
    peer.id = id;
    addConnection(id, conn);
    // send any ice candidates to the other peer
    peer.onicecandidate = function (evt) {
      if (evt.candidate) {
  %#      console.log(evt.candidate);
        sendCandidate({type: "candidate",
                          sendto: conn.id,
                          sdpMLineIndex: evt.candidate.sdpMLineIndex,
                          sdpMid: evt.candidate.sdpMid,
                          candidate: evt.candidate.candidate});
      } else {
        console.log("End of candidates. ------------------- phase=" + evt.eventPhase);
        conn.established = true;
      }
    };

    console.log('Adding local stream...');
    peer.addStream(localStream);

    peer.addEventListener("addstream", onRemoteStreamAdded, false);
    peer.addEventListener("removestream", onRemoteStreamRemoved, false);

    // when remote adds a stream, hand it on to the local video element
    function onRemoteStreamAdded(event) {
      console.log("Added remote stream");
 %#     attachvoice(this.id, event.stream); 
      attachvoice(id, event.stream);  // for safari.....
      //remoteVideo.src = window.webkitURL.createObjectURL(event.stream);
    }

    // when remote removes a stream, remove it from the local video element
    function onRemoteStreamRemoved(event) {
      console.log("Remove remote stream");
      detachvoice(this.id);
      //remoteVideo.pause();
      //remoteVideo.src = "";
    }

    return conn;
  }

%# セッション情報をハッシュでまとめる為のオブジェクト
  var connections = {}; // Connection hash
  function Connection() { // Connection Class
    var self = this;
    var id = "";  // socket.id of partner
    var peerconnection = null; // RTCPeerConnection instance
    var established = false; // is Already Established
    var iceReady = false;
  }

  function getConnection(id) {
    var con = null;
    con = connections[id];
%#    console.log("stringify con:" + JSON.stringify(con));
    console.log("get con:" + JSON.stringify(con));
    return con;
  }

  function onOffer(evt) {
    console.log("Received offer...")
 %#   console.log(evt);
    setOffer(evt);
    sendAnswer(evt);
    //peerStarted = true; --
  }

  function onAnswer(evt) {
    console.log("Received Answer...")
%#    console.log(evt);
    setAnswer(evt);
  }

 function onCandidate(evt) {
    var id = evt.from;
    console.log("onCandidate id:" + id);
    var conn = getConnection(id);
    if (! conn) {
      console.error('peerConnection not exist!');
      return;
    }

    // --- check if ice ready ---
    if (! conn.iceReady) {
      console.warn("PeerConn is not ICE ready, so ignore");
      return;
    }
    var candidate = new RTCIceCandidate({sdpMLineIndex:evt.sdpMLineIndex, sdpMid:evt.sdpMid, candidate:evt.candidate});
    console.log("Received Candidate...")
 %#   console.log(candidate);
    conn.peerconnection.addIceCandidate(candidate);
      console.log("addCandidate");
  }

  function detachvoice(id) {
     console.log("Detach Voice id=" + id);
     document.getElementById(id).src = "";
  }

  function addConnection(id, connection) {
    connections[id] = connection;
    console.log("addConnection:" + id);
  }


 %# room名入力を受けるための処理
$(document).on('pageshow',function () {

      $('#roomname').focus();

      $('#roomname').keydown(function (e) {
        if (e.keyCode == 13 && $('#roomname').val()) {
            var chars = $('#roomname').val();
            var entryevt = {'entry' : chars };
            ws.send(JSON.stringify(entryevt));
            console.log("key Down echo");
            %# 画面更新
            qrcodeset();
            member();
      %# 他のメンバーへ画面のリロード指定
            var reloadmember = {"type":"reloadmember"};
            ws.send(JSON.stringify(reloadmember));
            console.log("DEBUG: reloadmember: " + JSON.stringify(reloadmember) );
            }
       });

}); // pageshow

function standby(){
    %# 準備OK設定
    var readygo = { 'setReady' : connid };
    ws.send(JSON.stringify(readygo));
    console.log(JSON.stringify(readygo));

    %# 画面のリロード
    member();

    %# 他のメンバーへ画面のリロード指定
    var reloadmember = {"type":"reloadmember"};
    ws.send(JSON.stringify(reloadmember));
    }

    var localstream = null;
    var peerConnection = null;
    var mediaConstraints = {'mandatory': {'OfferToReceiveAudio':true, 'OfferToReceiveVideo':false }};

var oncall = false;

function call(){

       console.log("Call Start!");

  %# メンバー全員のreadyをチェック
%#    var memcnt = memberlist.length;
%#        console.log("memcnt:" + memcnt);
%#    var discnt = 0;
%#    for (i=0; i<memcnt; i++){
%#        var resline = JSON.parse(memberlist[i]);
%#        if ( resline.ready == '1' ) { discnt++ };
%#    };

%#        console.log("discnt:" + discnt);

%#    if ( discnt !== memcnt || memcnt == 0) {
%#         alert("Wait for Standby ALL members!");
%#         return;
%#    }; 

    oncall = true;
    sendcall();

    %# 50秒単位のwait送信を止める ->追加接続を可能にしたので停止しない。
%#    clearInterval(socket_wait);
%#    sokect_wait = null;
%#    console.log("socket_wait STOP.");
}

function sendcall(){
    // call others, in same room
    console.log("call others in same room, befeore offer");
    var typecall = JSON.stringify({"type":"call"});
    console.log("typecall:" + typecall);
    ws.send(typecall);

}

  function sendSDP(sdp) {
    %#    sdp.from = localconn;  //signalingで付加している。
    var text = JSON.stringify(sdp);
    console.log("---sending sdp text ---");
%#    console.log("sendSDP:" + text);

    // send via socket
    ws.send(text);
  }

  function sendCandidate(candidate) {
    %#    candidate.from = localconn;
    var text = JSON.stringify(candidate);
    console.log("---sending candidate text ---");
%#    console.log(text);

    // send via socket
    ws.send(text);
  }

  function setOffer(evt) {
    var id = evt.from;
    var conn = getConnection(id);
    if (! conn) {
      conn = prepareNewConnection(id);
      conn.peerconnection.setRemoteDescription(new RTCSessionDescription(evt));
    }
    else {
      console.error('peerConnection alreay exist!');
    }
  }


 function sendAnswer(evt) {
    console.log('sending Answer. Creating remote session description...' );
    var id = evt.from;
    var conn = getConnection(id);
    if (! conn) {
      console.error('peerConnection not exist!');
      return
    }

%#    conn.peerconnection.createAnswer(function (sessionDescription) {
%#      // in case of success
%#      conn.iceReady = true;
%#      conn.peerconnection.setLocalDescription(sessionDescription);
%#      sessionDescription.sendto = id;

%#      var cpsdp = JSON.parse(JSON.stringify(sessionDescription));
%#          cpsdp.sendto = id;
%#      var newsdp = JSON.parse(JSON.stringify(cpsdp));

%#      sendSDP(newsdp);
%#    }, function () { // in case of error
%#      console.log("Create Answer failed");
%#    }, mediaConstraints);
    %# promise rewrite!!
    conn.peerconnection.createAnswer()
        .then(function (sessionDescription) {
      // in case of success
      conn.iceReady = true;
      conn.peerconnection.setLocalDescription(sessionDescription);
      sessionDescription.sendto = id;

      var cpsdp = JSON.parse(JSON.stringify(sessionDescription));
          cpsdp.sendto = id;
      var newsdp = JSON.parse(JSON.stringify(cpsdp));

      sendSDP(newsdp);
    }).catch( function () { // in case of error
      console.log("Create Answer failed");
    }, mediaConstraints);
    conn.iceReady = true;
  }

  function setAnswer(evt) {
    var id = evt.from;
    var conn = getConnection(id);
    if (! conn) {
      console.error('peerConnection not exist!');
      return
    }
    conn.peerconnection.setRemoteDescription(new RTCSessionDescription(evt))
         .then( function(){
                     console.log("setAnswer Compleate!-----------------------");
          })
         .catch( function(){
                     console.error('setRemoteDescription(answer) ERROR: ', err);
          });
  }

    function attachvoice(id, stream) {
        console.log('try to attach voice. id=' + id);
     %#   document.getElementById(id).src = window.URL.createObjectURL(stream); // old
        document.getElementById(id).srcObject = stream;  // safari or new
    }

  function detachAllvoice() {
    var element = null;
    for (var id in connections) {
        id = null;
    }
  }

  function detachvoice(id) {
     console.log("Detach Voice id=" + id);
     document.getElementById(id).src = "";
     document.getElementById(id).srcObject = "";
  }


  function stopAllConnections() {
    for (var id in connections) {
      var conn = connections[id];
      conn.peerconnection.close();
      conn.peerconnection = null;
      delete connections[id];
    }
  }

function member(){
   %# メンバーリストの更新
    var getlist = {"getlist":"dummy"};
    ws.send(JSON.stringify(getlist));
    console.log("getlist:" + JSON.stringify(getlist));

}

function hangUp(){

 %#   window.location.reload();
    window.location.replace('https://<%= $url_host %>/voicechat2n');

}

function getRoomName() {
    var url = document.location.href;
    var args = url.split('?');
    if (args.length > 1) {
      var room = args[1];
      if (room != "") {
        var encroom = decodeURI(room);
        return encroom;
      }
    }
    return ; 
  }

function pushcall(){
// site1にemailとroomanameを送って、webpushを行う mode
  $('#errormess').empty;

  var pushemail = $('#pushemail').val();
  var roomname = $('#roomname').val();
  var username = "<%= $username %>";

  if (( pushemail == "") || (roomname == "") || (username == "")){
       $('#errormess').text("ERROR");
       return;
     }

  var pushurl = "https://<%= $url_host %>/voicechat2n?" + roomname;
  var encurl = encodeURI(pushurl);

  var bodymess = username + "さんから,voicechatの申請です。roomは" + roomname + "です。";

 var params = {
                "to" : pushemail,
                "from" : username,
                "roomname" : roomname,
                "page" : "voicechat",
                "body" : bodymess,
                "url" : encurl,
              };

 var data = JSON.stringify(params);

 function postpush(){
     return $.ajax({
            type: "POST",
                    url: "https://<%= $url_host %>/sendwebpush",
                    dataType: "json",
                    cache: false,
                    data: data,
                    success: responseget,
           });
    }

    postpush();

  function responseget(data){
       $('#errormess').text(data.mess);
    }
} // pushcall


function qrcodeset(){

   var roomname = $('#roomname').val();
   var qrurl = "https://<%= $url_host %>/voicechat2n?" + roomname;
   var encurl = encodeURI(qrurl);
   console.log("DEBUG: qrcode: " + encurl );
   var param = "data=" + encurl;
%#   var data = JSON.stringify(param);

   return $.ajax({
                type: "POST",
                url: "https://<%= $url_host %>/qrcode",
                dataType: "html",
                cache: false,
                data: param,
                timeout: 3000,
                async: true,
                success: qrrespons
           });

  function qrrespons(html){
       %#  console.log("HTML: " + html);
         $('#qrcode').html(html);
    }

} // qrcodeset


function autoentry(){
    //通知の場合の自動エントリー
    var rname = getRoomName();
    $('#roomname').val(rname);
    console.log("DEBUG: roomname: " + rname );
    if ( typeof rname != 'undefined'){
            var entryevt = {'entry' : rname };
            ws.send(JSON.stringify(entryevt));
            member();
            var reloadmember = {"type":"reloadmember"};
            ws.send(JSON.stringify(reloadmember));
    }
};

function imgupload(){
    //イメージチャットのupload 
  var roomname = $('#roomname').val();

  var $form   = $('#uploadform');
  var $iframe = $('iframe[name="ajaxPostImage"]');
      $('#roomsend').val(roomname);

  if ( roomname == ''){
       $('#errormess_r').text("ERROR");
       return;
     }

    $form.submit(function()
    {
        // submitされた時点で、loadイベントをbind
        $iframe.unbind().bind('load', function() {
            var response = $iframe.contents();
            // responseを調べて、送信後の処理を完結させる
            console.log(response);
        });
    });
%#   adumCall();  仕様変更
}

%# 仕様変更未利用
function reloadimgsend(){
      var reloadimg = {"type":"reloadimg"};
      ws.send(JSON.stringify(reloadimg));   //reloadimgのブロードキャスト
      console.log("DEBUG: send reloadimg message...");
}

%# 仕様変更未利用
function reloadimgkey(){
    fetchupload.then(imgupload(reloadimgsend))
               .then(reloadimgsend());
}

</script>

<div data-role="page" style="background: #80aa55">
    <div data-role="header">
        <a href="#panel" data-icon="bars" data-iconpos="notext" class="ui-btn-left">panel</a>
        <h3>Voice Chat </h3>
        <a href="#panel_r" data-icon="bars" data-iconpos="notext" class="ui-btn-right">panel_r</a>
    </div>
         <!--  left panel -->
         <div data-role="panel" id="panel" data-display="overlay" style="background-color: #aac78d;">
            <div id="errormess"></div>
            <p><input type="text" id="pushemail" placeholder="email" data-clear-btn="true"></p>
            <button type="button" onclick="pushcall();">呼び出しpush通知</button>
            <div id="qrcode"></div>
            <div> room名を打ち込むとQRcodeが表示され、スキャンすればチャットルームに入れます。</div>
         </div>
         <!-- right panel -->
         <div data-role="panel" id="panel_r" data-display="overlay" data-position="right" style="background-color: #aac78d;">
            <div id="errormess_r"></div>
            <form id="uploadform" method="post" action="/putfileimg" enctype="multipart/form-data" target="ajaxPostImage" data-ajax="false">
                <div>ファイルサイズは100MBが上限です！！</div>
                <input type="file" accept="image/*;capture=camera" name="filename" id="upfile">
                <input type="hidden" name="room" value="" id="roomsend">
                <button type="botton" onclick="imgupload();">upload</button>
            </form>
               <div>
               <iframe src="/img/Now.jpeg" id="imgchat" name="ajaxPostImage" width="100%" hight="80%"></iframe>
               </div>
               <ul>
                   <li>room内で1個のファイルを共有表示します。後書きが優先で残るので同時アップロードしないようにして下さい。</li>
                   <li>・表示可能なファイルは画像(jpeg gif png)、音楽(mp3 m4a)、動画(3gp)です。</li>
               </il>
         </div>
    <div style="color: #ff0000"><%= $msg_w %></div>
        <div style="border: 1px solid">
            <p>
               <div data-role="collapsibleset">
                <div data-role="collapsible">
                  <h4>使い方</h4>
                     <ul data-role="listview">
                        <li style="color: #0000ff">１．共通のroom名を入力してエンター押してください。</li>
                        <li style="color: #0000ff">２. 相手のアイコンが表示されたら、connectボタンを押して通話状態を確認して下さい。</li>
                        <li style="color: #ff0000">３．hungUpで終了して下さい。</li>
                     </ul>
                 </div>
               </div>
            </p>
            <p>room名は大文字小文字、全角半角を区別します。重複しない程度の長さで利用して下さい。</p>
            <ul id="userlist" data-role="listview" data-inset="true"></ul>
            <p><input type="text" id="roomname" placeholder="room..."></p>
    %#        <button type="button" onclick="member();">Memberlist Reload</button>
    %#        <button type="button" class="ui-btn ui-btn-inline" onclick="standby();">Standby</button>
            <button type="button" class="ui-btn ui-btn-inline" onclick="call();">Connect</button>
            <button type="button" class="ui-btn ui-btn-inline" style="color: #ff0000" onclick="hangUp();">Hang Up</button>
        </div>
        <div>
           <ul>
             <li>5人まで同時に接続出来ます。</li>
             <li>音声はタイムラグが有ります。</li>
             <li>インジケーターは接続を確認できますが、切断されても認識出来ないので、あくまで目安程度です。</li>
             <li>イコライザーアプリを追加して、音声用に低音、高音を落とした方が聞き取りやすいかもしれません</li>
              <li>Webpushで通知が送れます。room名を入力してチャット待機状態にしてから、左上のバーボタンを開いて、相手のemailを指定して通知が出来ます。
</li>
           </ul>
        </div>

         <div page-role="panel" id="r_panel" data-display="overlay">
         </div>
    <div data-role="footer" style="backgroud: #aac78d;">
    <a href="" data-rel="back" class="btn-inline">back</a>
    <a href="/menu" class="btn-inline">メニュー</a>
    </div>
</div>
