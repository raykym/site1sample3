% layout 'mobidef';
% title 'WebRTC x2';

<div data-role="page" style="background: #80aa55">
    <div><h3>WebRTC page</h3></div>
    <div style="color: #ff0000"><%= $msg_w %></div>
    <div><textarea id="warn-msg"></textarea></div>
        <div style="border: 1px solid">

  <div>
   <video id="local-video" autoplay controls style="width: 240px; height: 180px; border: 1px solid black;"></video>
%#   <audio id="local-video" autoplay controls style="border: 1px solid black;"></audio>
   <video id="remote-video" autoplay controls style="width: 480px; height: 360px; border: 1px solid black;"></video>
%#   <audio id="remote-video" autoplay controls style="border: 1px solid black;"></audio>
  </div>
  <button type="button" onclick="startVideo();">Start video</button>
  <button type="button" onclick="stopVideo();">Stop video</button>
  <button type="button" onclick="connect();">Connect</button>
  <button type="button" onclick="hangUp();">Hang Up</button>
  <br />
  <div>
  </div>

         </div>
    <div data-role="footer" style="backgroud: #aac78d;">
    <a href="" data-rel="back" class="btn-inline">back</a>
    <a href="/menu" class="btn-inline">メニュー</a>
    </div>
</div>

  <script type="text/javascript">

  var localVideo = document.getElementById('local-video');
  var remoteVideo = document.getElementById('remote-video');
  var localStream = null;
  var peerConnection = null;
  var peerStarted = false;
  var mediaConstraints = {'mandatory': {'OfferToReceiveAudio':true, 'OfferToReceiveVideo':true }};

  // --------- websocket ----------
  var socketReady = false;
  var roomname = getRoomName(); // 会議室名を取得する
  var ws = new WebSocket('wss://westwind.iobb.net/signaling?r=' + roomname);
      ws.onopen = function(){
          console.log('socket opened.');
          socketReady = true;
          };
      ws.onmessage = function(msg){
        var evt = JSON.parse(msg.data);
        if (evt.type === 'offer') {
          console.log("Received offer, set offer, sending answer....")
          onOffer(evt);
            } else if (evt.type === 'answer' && peerStarted) {
          console.log('Received answer, settinng answer SDP');
          onAnswer(evt);
            } else if (evt.type === 'candidate' && peerStarted) {
          console.log('Received ICE candidate...');
          onCandidate(evt);
            } else if (evt.type === 'user dissconnected' && peerStarted) {
          console.log("disconnected");
          stop();
            }
       };

    // websocket roomentrycheck 切断はsendSDPのダミー送信で行われる
  var ws_count = new WebSocket('wss://westwind.iobb.net/roomentrycheck?r=' + roomname);
      ws_count.onopen = function(){
          console.log('ROOMENTRY: socket opened.');
          };
      ws_count.onmessage = function(cnt_msg){
        var roomentr = JSON.parse(cnt_msg.data);
        if (roomname == 'signal_tbl'){ roomname = 'default' };
        $("#warn-msg").text(roomname + ":" + roomentr.count + "人入室中！");
      }


  function getRoomName() { // たとえば、 URLに  ?roomname  とする
    var url = document.location.href;
    var args = url.split('?');
    if (args.length > 1) {
      var room = args[1];
      if (room != "") {
        return room;
      }
    }
    return "signal_tbl";  //signalingのデフォルト値をここで指定、空白でも大丈夫なんだけど・・・
  }


  // ----------------- handshake --------------
  var textForSendSDP;
  var textForSendICE;
  var textToReceiveSDP;
  var textToReceiveICE;
  var iceSeparator = '------ ICE Candidate -------';
  var CR = String.fromCharCode(13);

  function onSDP() {
    var text = textToReceiveSDP.value;
    var evt = JSON.parse(text);
    if (peerConnection) {
      onAnswer(evt);
    }
    else {
      onOffer(evt);
    }
  }

  //--- multi ICE candidate ---
  function onICE() {
    var text = textToReceiveICE.value;
    var arr = text.split(iceSeparator);
    for (var i = 1, len = arr.length; i < len; i++) {
      var evt = JSON.parse(arr[i]);
      onCandidate(evt);
    }
  }

  function onOffer(evt) {
    console.log("Received offer...")
    console.log(evt);
    setOffer(evt);
    sendAnswer(evt);
    peerStarted = true; // 追加
  }

  function onAnswer(evt) {
    console.log("Received Answer...")
    console.log(evt);
    setAnswer(evt);
  }

  function onCandidate(evt) {
    var candidate = new RTCIceCandidate({sdpMLineIndex:evt.sdpMLineIndex, sdpMid:evt.sdpMid, candidate:evt.candidate});
    console.log("Received Candidate...")
    console.log(candidate);
    peerConnection.addIceCandidate(candidate);
  }

  function sendSDP(sdp) {
    var text = JSON.stringify(sdp);
    console.log("---sending sdp text ---");
    console.log(text);
    ws.send(text);
    // roomentrycountを終了するためのイベント
    ws_count.send('{dummy:dummy}');
  }

  function sendCandidate(candidate) {
    var text = JSON.stringify(candidate);
    console.log("---sending candidate text ---");
    console.log(text);
    ws.send(text);
  }

  // ---------------------- video handling -----------------------
  // start local video
  function startVideo() {
    navigator.webkitGetUserMedia({video: true, audio: true},
 %#   navigator.webkitGetUserMedia({video: false, audio: true},
    function (stream) { // success
      localStream = stream;
      localVideo.src = window.URL.createObjectURL(stream);
      localVideo.play();
      localVideo.volume = 0;
    },
    function (error) { // error
      console.error('An error occurred: [CODE ' + error.code + ']');
      return;
    }
    );
  }

  // stop local video
  function stopVideo() {
    localVideo.src = "";
    localStream.stop();
  }

  // ---------------------- connection handling -----------------------
  function prepareNewConnection() {
    //STUN対応
    var pc_config = {"iceServers":[]};
    var pc_config = {"iceServers":[{"url":"stun:stun.l.google.com:19302"}]};
    var pc_config = {"iceServers":[{"url":"stun:westwind.iobb.net:5349"}]};
    var pc_config = {"iceServers":[{"url":"turn:westwind.iobb.net:5349","username":"debiansv","credential":"debiansvpass"}]};
    var peer = null;
    try {
      peer = new webkitRTCPeerConnection(pc_config);
    } catch (e) {
      console.log("Failed to create peerConnection, exception: " + e.message);
    }
    // send any ice candidates to the other peer
    peer.onicecandidate = function (evt) {
      if (evt.candidate) {
        console.log(evt.candidate);
        sendCandidate({type: "candidate",
                          sdpMLineIndex: evt.candidate.sdpMLineIndex,
                          sdpMid: evt.candidate.sdpMid,
                          candidate: evt.candidate.candidate}
        );
      } else {
        console.log("End of candidates. ------------------- phase=" + evt.eventPhase);
      }
    };

    console.log('Adding local stream...');
    peer.addStream(localStream);

    peer.addEventListener("addstream", onRemoteStreamAdded, false);
    peer.addEventListener("removestream", onRemoteStreamRemoved, false)

    // when remote adds a stream, hand it on to the local video element
    function onRemoteStreamAdded(event) {
      console.log("Added remote stream");
      remoteVideo.src = window.URL.createObjectURL(event.stream);
    }

    // when remote removes a stream, remove it from the local video element
    function onRemoteStreamRemoved(event) {
      console.log("Remove remote stream");
      remoteVideo.src = "";
    }

    return peer;
  }

  function sendOffer() {
    peerConnection = prepareNewConnection();
    peerConnection.createOffer(function (sessionDescription) { // in case of success
      peerConnection.setLocalDescription(sessionDescription);
      console.log("Sending: SDP");
      console.log(sessionDescription);
      sendSDP(sessionDescription);
    }, function () { // in case of error
      console.log("Create Offer failed");
    }, mediaConstraints);
  }

  function setOffer(evt) {
    if (peerConnection) {
      console.error('peerConnection alreay exist!');
    }
    peerConnection = prepareNewConnection();
    peerConnection.setRemoteDescription(new RTCSessionDescription(evt));
  }

  function sendAnswer(evt) {
    console.log('sending Answer. Creating remote session description...' );
    if (! peerConnection) {
      console.error('peerConnection NOT exist!');
      return;
    }
    peerConnection.createAnswer(function (sessionDescription) { // in case of success
      peerConnection.setLocalDescription(sessionDescription);
      console.log("Sending: SDP Answer");
      console.log(sessionDescription);
      sendSDP(sessionDescription);
    }, function () { // in case of error
      console.log("Create Answer failed");
    }, mediaConstraints);
  }
  function setAnswer(evt) {
    if (! peerConnection) {
      console.error('peerConnection NOT exist!');
      return;
    }
    peerConnection.setRemoteDescription(new RTCSessionDescription(evt));
  }

  // -------- handling user UI event -----
  // start the connection upon user request
  function connect() {
    if (!peerStarted && localStream && socketReady) {
      sendOffer();
      peerStarted = true;
    } else {
      alert("Local stream not running yet - try again.");
    }
  }

  // stop the connection upon user request
  function hangUp() {
    console.log("Hang up.");
    stop();
  }

  function stop() {
    peerConnection.close();
    peerConnection = null;
    peerStarted = false;
  }
  </script>










